import os
import json
import glob
import logging
+import re
+import html
from typing import List, Dict, Any, Optional

from fastapi import FastAPI
from fastapi.responses import JSONResponse

# Added: urllib for Telegram Bot API publishing
from urllib import request as urlrequest
from urllib.error import HTTPError, URLError

from .config import settings
import time

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s [%(name)s] %(message)s")
logger = logging.getLogger("aggregator.main")

app = FastAPI(title="MediaGenerator Aggregator", version="0.1.0")


def _read_approved(limit: Optional[int] = None) -> List[Dict[str, Any]]:
    pattern = os.path.join(settings.APPROVED_DIR, "*.json")
    files = sorted(glob.glob(pattern))
    if limit:
        files = files[:limit]
    items: List[Dict[str, Any]] = []
    for p in files:
        try:
            with open(p, "r", encoding="utf-8") as f:
                payload = json.load(f)
            items.append({"path": p, "payload": payload})
        except Exception:
            logger.exception("Failed to read %s", p)
    return items


def _compose_prompt(items: List[Dict[str, Any]], lang: str) -> str:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–¥–µ–ª–∏: —Å—Ç—Ä–æ–≥–∏–π Markdown-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram
    lines: List[str] = [
        "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤. –°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram.",
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã–≤–µ–¥–∏ –†–û–í–ù–û —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏:",
        "1) –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ Markdown-—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: [–ó–∞–≥–æ–ª–æ–≤–æ–∫](URL). –ï—Å–ª–∏ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —Å—Å—ã–ª–∫–∏.",
        "2) –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç—Å—ã–ª–∫–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É: –Ω–∞–ø—Ä–∏–º–µ—Ä ‚Äòüì∞ –ö–∞–Ω–∞–ª <–ò–º—è–ö–∞–Ω–∞–ª–∞> (@username) —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ ‚Ä¶‚Äô –∏–ª–∏ ‚Äòüß† –ö–∞–∫ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ ForbesRussia, ‚Ä¶‚Äô.",
        "3) –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
        "–ú–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ ‚Äî –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤, HTML –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è. –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Markdown.",
    ]
    lines.append("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (title, url, text):")
    for it in items:
        p = it["payload"]
        title = p.get("channel_title") or p.get("channel_name") or "–ö–∞–Ω–∞–ª"
        username = p.get("channel_username")
        msg_id = p.get("message_id")
        url = f"https://t.me/{username}/{msg_id}" if username and msg_id else ""
        text = p.get("text") or (p.get("media") or {}).get("caption") or ""
        if text and len(text) > 4000:
            text = text[:4000] + "‚Ä¶"
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–æ–¥–µ–ª–∏ –±—ã–ª–æ –ø—Ä–æ—â–µ
        lines.append(f"- title: {title}")
        lines.append(f"  url: {url}")
        lines.append("  text: |")
        for ln in (text or "").splitlines():
            lines.append(f"    {ln}")
        lines.append("")
    lines.append("–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ Markdown –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.")
    return "\n".join(lines)

+
+def _markdown_to_html_safe(text: str) -> str:
+    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ Markdown-—Å—Å—ã–ª–∫–∏ [text](url) –≤ <a href="url">text</a>
+    –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ HTML –≤ Bot API.
+    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ http/https —Å—Å—ã–ª–∫–∏. –≠–º–æ–¥–∑–∏ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.
+    """
+    # 1) –ó–∞–º–µ–Ω–∏–º Markdown-—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
+    placeholders: list[str] = []
+    def repl(m: re.Match[str]) -> str:
+        title = m.group(1)
+        url = m.group(2)
+        anchor = f'<a href="{html.escape(url, quote=True)}">{html.escape(title)}</a>'
+        placeholders.append(anchor)
+        return f"__LINK_PLACEHOLDER_{len(placeholders)-1}__"
+
+    pattern = re.compile(r"\[([^\]]+)\]\((https?://[^\s)]+)\)")
+    tmp = pattern.sub(repl, text)
+
+    # 2) –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ HTML
+    escaped = html.escape(tmp)
+
+    # 3) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —è–∫–æ—Ä—è–º–∏
+    for i, a in enumerate(placeholders):
+        escaped = escaped.replace(f"__LINK_PLACEHOLDER_{i}__", a)
+
+    return escaped
+
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞ + —Å—Å—ã–ª–∫–∞ + —Ç–µ–∫—Å—Ç
    lines: List[str] = [
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ, —ë–º–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "–°–∂–∞—Ç–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∏–º—è –∫–∞–Ω–∞–ª–∞ –∏ —Å—Å—ã–ª–∫—É).",
    ]
    for it in items:
        p = it["payload"]
        title = p.get("channel_title") or p.get("channel_name") or "–ö–∞–Ω–∞–ª"
        username = p.get("channel_username")
        msg_id = p.get("message_id")
        url = f"https://t.me/{username}/{msg_id}" if username and msg_id else ""
        text = p.get("text") or (p.get("media") or {}).get("caption") or ""
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        if text and len(text) > 4000:
            text = text[:4000] + "‚Ä¶"
        block = f"\n### {title}\n{url}\n{text}".strip()
        lines.append(block)
    lines.append("\n–í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n- [–ó–∞–≥–æ–ª–æ–≤–æ–∫] –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ò—Å—Ç–æ—á–Ω–∏–∫: –ò–º—è–ö–∞–Ω–∞–ª–∞ ‚Äî —Å—Å—ã–ª–∫–∞)")
    return "\n".join(lines)


def _use_gemini(prompt: str) -> str:
    try:
        import google.generativeai as genai  # type: ignore
        genai.configure(api_key=settings.GEMINI_API_KEY)
        model_name = "gemini-1.5-flash"
        start = time.perf_counter()
        logger.info(f"Gemini request: model={model_name} prompt_len={len(prompt)}")
        model = genai.GenerativeModel(model_name)
        resp = model.generate_content(prompt)
        duration_ms = int((time.perf_counter() - start) * 1000)
        text = (resp.text or "").strip()
        logger.info(f"Gemini response: ok={bool(text)} text_len={len(text)} duration_ms={duration_ms}")
        return text
    except Exception as e:
        logger.exception("Gemini call failed: %s", e)
        return ""


def _fallback_summary(items: List[Dict[str, Any]], lang: str) -> str:
    # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–±—ç–∫ –±–µ–∑ ML: —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤
    # –§–æ—Ä–º–∞—Ç: - [–ö–∞–Ω–∞–ª] –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞‚Ä¶ (–ò—Å—Ç–æ—á–Ω–∏–∫: @username/ID)
    lines: List[str] = []
    for it in items:
        p = it["payload"]
        title = p.get("channel_title") or p.get("channel_name") or "–ö–∞–Ω–∞–ª"
        username = p.get("channel_username")
        msg_id = p.get("message_id")
        url = f"https://t.me/{username}/{msg_id}" if username and msg_id else ""
        text = p.get("text") or (p.get("media") or {}).get("caption") or ""
        first_line = (text or "").splitlines()[0].strip()
        if len(first_line) > 200:
            first_line = first_line[:200] + "‚Ä¶"
        src = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {title} ‚Äî {url}" if url else f"–ò—Å—Ç–æ—á–Ω–∏–∫: {title}"
        lines.append(f"- [{title}] {first_line} ({src})")
    header = "–î–∞–π–¥–∂–µ—Å—Ç (—Ñ–æ–ª–±—ç–∫):"
    return "\n".join([header] + lines)


@app.get("/health")
def health():
    return JSONResponse({
        "ok": True,
        "status": "ok",
        "service": "aggregator",
        "approved_dir": settings.APPROVED_DIR,
        "output_dir": settings.OUTPUT_DIR,
    })


@app.post("/api/aggregator/run")
def run_aggregation(limit: Optional[int] = None):
    items = _read_approved(limit or settings.BATCH_LIMIT)
    if not items:
        return JSONResponse({"ok": True, "result": "empty", "summary": ""})

    logger.info(f"Run aggregation: items={len(items)}")
    prompt = _compose_prompt(items, settings.SUMMARY_LANGUAGE)
    summary = _use_gemini(prompt)
    if not summary:
        logger.error("Gemini returned empty summary; aborting aggregation")
        return JSONResponse({"ok": False, "result": "gemini_failed", "error": "empty_summary"})

    out_name = "summary.txt"
    out_path = os.path.join(settings.OUTPUT_DIR, out_name)
    wrote_ok = False
    try:
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(summary)
        wrote_ok = True
        logger.info(f"Summary written: path={out_path} len={len(summary)}")
    except Exception:
        logger.exception("Failed to write summary to %s", out_path)

    removed = []
    if wrote_ok:
        for it in items:
            try:
                os.remove(it["path"]) 
                removed.append(os.path.basename(it["path"]))
            except Exception:
                logger.exception("Failed to remove %s", it["path"]) 
        logger.info(f"Approved removed: count={len(removed)}")
    else:
        logger.warning("Summary not written; approved are kept")

    return JSONResponse({"ok": True, "result": "ok", "output": out_path, "removed": removed})


@app.post("/api/aggregator/publish_now")
def publish_now(limit: Optional[int] = None):
    items = _read_approved(limit or settings.BATCH_LIMIT)
    if not items:
        return JSONResponse({"ok": True, "result": "empty", "published": False})

    logger.info(f"Publish now: items={len(items)}")
    prompt = _compose_prompt(items, settings.SUMMARY_LANGUAGE)
    summary = _use_gemini(prompt)
    if not summary:
        logger.error("Gemini returned empty summary; aborting publish")
        return JSONResponse({"ok": False, "result": "gemini_failed", "published": False, "error": "empty_summary"})

    out_path = os.path.join(settings.OUTPUT_DIR, "summary.txt")
    wrote_ok = False
    try:
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(summary)
        wrote_ok = True
        logger.info(f"Summary written: path={out_path} len={len(summary)}")
    except Exception:
        logger.exception("Failed to write summary to %s", out_path)

    published = False
    if settings.BOT_TOKEN and settings.TARGET_CHANNEL_ID:
        try:
            logger.info(f"Publishing to Telegram: chat_id={settings.TARGET_CHANNEL_ID} text_len={len(summary)}")
            api_url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage"
+            html_text = _markdown_to_html_safe(summary)
            body = {
                "chat_id": settings.TARGET_CHANNEL_ID,
-                "text": summary,
+                "text": html_text,
                 "disable_web_page_preview": True,
-                "parse_mode": "Markdown",
+                "parse_mode": "HTML",
             }
             req = urlrequest.Request(api_url, data=json.dumps(body, ensure_ascii=False).encode("utf-8"), headers={"Content-Type": "application/json"})
             with urlrequest.urlopen(req, timeout=15) as resp:
                 published = (resp.status == 200)
                 if not published:
                     logger.warning(f"Bot API non-200 response: {resp.status}")
         except HTTPError as he:
             try:
                 err_body = he.read().decode("utf-8")
             except Exception:
                 err_body = str(he)
             logger.error(f"Bot API HTTPError: {he.code} {err_body}")
         except URLError as ue:
             logger.error(f"Bot API URLError: {ue}")
         except Exception as e:
             logger.exception(f"Bot API request failed: {e}")

    removed = []
    if wrote_ok and published:
        for it in items:
            try:
                os.remove(it["path"]) 
                removed.append(os.path.basename(it["path"]))
            except Exception:
                logger.exception("Failed to remove %s", it["path"]) 
        logger.info(f"Approved removed: count={len(removed)}")
    else:
        logger.warning("Publish failed or summary not written; approved are kept")

    return JSONResponse({"ok": True, "result": "ok", "output": out_path, "removed": removed, "published": published})